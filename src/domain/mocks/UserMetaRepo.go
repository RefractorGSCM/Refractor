// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "Refractor/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserMetaRepo is an autogenerated mock type for the UserMetaRepo type
type UserMetaRepo struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *UserMetaRepo) GetByID(ctx context.Context, userID string) (*domain.UserMeta, error) {
	ret := _m.Called(ctx, userID)

	var r0 *domain.UserMeta
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UserMeta); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserMeta)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkedPlayers provides a mock function with given fields: ctx, userID
func (_m *UserMetaRepo) GetLinkedPlayers(ctx context.Context, userID string) ([]*domain.Player, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*domain.Player
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Player); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsername provides a mock function with given fields: ctx, userID
func (_m *UserMetaRepo) GetUsername(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDeactivated provides a mock function with given fields: ctx, userID
func (_m *UserMetaRepo) IsDeactivated(ctx context.Context, userID string) (bool, error) {
	ret := _m.Called(ctx, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkPlayer provides a mock function with given fields: ctx, userID, platform, playerID
func (_m *UserMetaRepo) LinkPlayer(ctx context.Context, userID string, platform string, playerID string) error {
	ret := _m.Called(ctx, userID, platform, playerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userID, platform, playerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: ctx, userInfo
func (_m *UserMetaRepo) Store(ctx context.Context, userInfo *domain.UserMeta) error {
	ret := _m.Called(ctx, userInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserMeta) error); ok {
		r0 = rf(ctx, userInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlinkPlayer provides a mock function with given fields: ctx, userID, platform, playerID
func (_m *UserMetaRepo) UnlinkPlayer(ctx context.Context, userID string, platform string, playerID string) error {
	ret := _m.Called(ctx, userID, platform, playerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userID, platform, playerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, userID, args
func (_m *UserMetaRepo) Update(ctx context.Context, userID string, args domain.UpdateArgs) (*domain.UserMeta, error) {
	ret := _m.Called(ctx, userID, args)

	var r0 *domain.UserMeta
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateArgs) *domain.UserMeta); ok {
		r0 = rf(ctx, userID, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserMeta)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, domain.UpdateArgs) error); ok {
		r1 = rf(ctx, userID, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

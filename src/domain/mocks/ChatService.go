// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "Refractor/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ChatService is an autogenerated mock type for the ChatService type
type ChatService struct {
	mock.Mock
}

// GetFlaggedMessageCount provides a mock function with given fields: c
func (_m *ChatService) GetFlaggedMessageCount(c context.Context) (int, error) {
	ret := _m.Called(c)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlaggedMessages provides a mock function with given fields: c, count, random
func (_m *ChatService) GetFlaggedMessages(c context.Context, count int, random bool) ([]*domain.ChatMessage, error) {
	ret := _m.Called(c, count, random)

	var r0 []*domain.ChatMessage
	if rf, ok := ret.Get(0).(func(context.Context, int, bool) []*domain.ChatMessage); ok {
		r0 = rf(c, count, random)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ChatMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, bool) error); ok {
		r1 = rf(c, count, random)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentByServer provides a mock function with given fields: c, serverID, count
func (_m *ChatService) GetRecentByServer(c context.Context, serverID int64, count int) ([]*domain.ChatMessage, error) {
	ret := _m.Called(c, serverID, count)

	var r0 []*domain.ChatMessage
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) []*domain.ChatMessage); ok {
		r0 = rf(c, serverID, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ChatMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = rf(c, serverID, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleChatReceive provides a mock function with given fields: body, serverID, game
func (_m *ChatService) HandleChatReceive(body *domain.ChatReceiveBody, serverID int64, game domain.Game) {
	_m.Called(body, serverID, game)
}

// HandleUserSendChat provides a mock function with given fields: body
func (_m *ChatService) HandleUserSendChat(body *domain.ChatSendBody) {
	_m.Called(body)
}

// Store provides a mock function with given fields: c, message
func (_m *ChatService) Store(c context.Context, message *domain.ChatMessage) error {
	ret := _m.Called(c, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ChatMessage) error); ok {
		r0 = rf(c, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnflagMessage provides a mock function with given fields: c, id
func (_m *ChatService) UnflagMessage(c context.Context, id int64) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

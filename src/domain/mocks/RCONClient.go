// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "Refractor/domain"

	rcon "github.com/refractorgscm/rcon"
	mock "github.com/stretchr/testify/mock"

	sync "sync"
)

// RCONClient is an autogenerated mock type for the RCONClient type
type RCONClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *RCONClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields:
func (_m *RCONClient) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecCommand provides a mock function with given fields: _a0
func (_m *RCONClient) ExecCommand(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecCommandNoResponse provides a mock function with given fields: _a0
func (_m *RCONClient) ExecCommandNoResponse(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGame provides a mock function with given fields:
func (_m *RCONClient) GetGame() domain.Game {
	ret := _m.Called()

	var r0 domain.Game
	if rf, ok := ret.Get(0).(func() domain.Game); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Game)
		}
	}

	return r0
}

// SetBroadcastChecker provides a mock function with given fields: handlerFunc
func (_m *RCONClient) SetBroadcastChecker(handlerFunc rcon.BroadcastMessageChecker) {
	_m.Called(handlerFunc)
}

// SetBroadcastHandler provides a mock function with given fields: handlerFunc
func (_m *RCONClient) SetBroadcastHandler(handlerFunc rcon.BroadcastHandler) {
	_m.Called(handlerFunc)
}

// SetDisconnectHandler provides a mock function with given fields: handlerFunc
func (_m *RCONClient) SetDisconnectHandler(handlerFunc rcon.DisconnectHandler) {
	_m.Called(handlerFunc)
}

// WaitGroup provides a mock function with given fields:
func (_m *RCONClient) WaitGroup() *sync.WaitGroup {
	ret := _m.Called()

	var r0 *sync.WaitGroup
	if rf, ok := ret.Get(0).(func() *sync.WaitGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sync.WaitGroup)
		}
	}

	return r0
}

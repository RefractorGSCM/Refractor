// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "Refractor/domain"

	mock "github.com/stretchr/testify/mock"
)

// GameService is an autogenerated mock type for the GameService type
type GameService struct {
	mock.Mock
}

// AddGame provides a mock function with given fields: game
func (_m *GameService) AddGame(game domain.Game) {
	_m.Called(game)
}

// GameExists provides a mock function with given fields: name
func (_m *GameService) GameExists(name string) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAllGames provides a mock function with given fields:
func (_m *GameService) GetAllGames() []domain.Game {
	ret := _m.Called()

	var r0 []domain.Game
	if rf, ok := ret.Get(0).(func() []domain.Game); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Game)
		}
	}

	return r0
}

// GetGame provides a mock function with given fields: name
func (_m *GameService) GetGame(name string) (domain.Game, error) {
	ret := _m.Called(name)

	var r0 domain.Game
	if rf, ok := ret.Get(0).(func(string) domain.Game); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameSettings provides a mock function with given fields: game
func (_m *GameService) GetGameSettings(game domain.Game) (*domain.GameSettings, error) {
	ret := _m.Called(game)

	var r0 *domain.GameSettings
	if rf, ok := ret.Get(0).(func(domain.Game) *domain.GameSettings); ok {
		r0 = rf(game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GameSettings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Game) error); ok {
		r1 = rf(game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameSettingsByName provides a mock function with given fields: gameName
func (_m *GameService) GetGameSettingsByName(gameName string) (*domain.GameSettings, error) {
	ret := _m.Called(gameName)

	var r0 *domain.GameSettings
	if rf, ok := ret.Get(0).(func(string) *domain.GameSettings); ok {
		r0 = rf(gameName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GameSettings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(gameName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetGameSettings provides a mock function with given fields: game, settings
func (_m *GameService) SetGameSettings(game domain.Game, settings *domain.GameSettings) error {
	ret := _m.Called(game, settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Game, *domain.GameSettings) error); ok {
		r0 = rf(game, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

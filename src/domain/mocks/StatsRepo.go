// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// StatsRepo is an autogenerated mock type for the StatsRepo type
type StatsRepo struct {
	mock.Mock
}

// GetTotalChatMessages provides a mock function with given fields: ctx
func (_m *StatsRepo) GetTotalChatMessages(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalChatMessagesInRange provides a mock function with given fields: ctx, start, end
func (_m *StatsRepo) GetTotalChatMessagesInRange(ctx context.Context, start time.Time, end time.Time) (int, error) {
	ret := _m.Called(ctx, start, end)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) int); ok {
		r0 = rf(ctx, start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalInfractions provides a mock function with given fields: ctx
func (_m *StatsRepo) GetTotalInfractions(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalNewInfractionsInRange provides a mock function with given fields: ctx, start, end
func (_m *StatsRepo) GetTotalNewInfractionsInRange(ctx context.Context, start time.Time, end time.Time) (int, error) {
	ret := _m.Called(ctx, start, end)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) int); ok {
		r0 = rf(ctx, start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalNewPlayersInRange provides a mock function with given fields: ctx, start, end
func (_m *StatsRepo) GetTotalNewPlayersInRange(ctx context.Context, start time.Time, end time.Time) (int, error) {
	ret := _m.Called(ctx, start, end)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) int); ok {
		r0 = rf(ctx, start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalPlayers provides a mock function with given fields: ctx
func (_m *StatsRepo) GetTotalPlayers(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUniquePlayersInRange provides a mock function with given fields: ctx, start, end
func (_m *StatsRepo) GetUniquePlayersInRange(ctx context.Context, start time.Time, end time.Time) (int, error) {
	ret := _m.Called(ctx, start, end)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) int); ok {
		r0 = rf(ctx, start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

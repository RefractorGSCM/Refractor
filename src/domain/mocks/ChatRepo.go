// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "Refractor/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ChatRepo is an autogenerated mock type for the ChatRepo type
type ChatRepo struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ChatRepo) GetByID(ctx context.Context, id int64) (*domain.ChatMessage, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.ChatMessage
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.ChatMessage); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ChatMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlaggedMessageCount provides a mock function with given fields: ctx
func (_m *ChatRepo) GetFlaggedMessageCount(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlaggedMessages provides a mock function with given fields: ctx, count, serverIDs
func (_m *ChatRepo) GetFlaggedMessages(ctx context.Context, count int, serverIDs []int64) ([]*domain.ChatMessage, error) {
	ret := _m.Called(ctx, count, serverIDs)

	var r0 []*domain.ChatMessage
	if rf, ok := ret.Get(0).(func(context.Context, int, []int64) []*domain.ChatMessage); ok {
		r0 = rf(ctx, count, serverIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ChatMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, []int64) error); ok {
		r1 = rf(ctx, count, serverIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentByServer provides a mock function with given fields: ctx, serverID, count
func (_m *ChatRepo) GetRecentByServer(ctx context.Context, serverID int64, count int) ([]*domain.ChatMessage, error) {
	ret := _m.Called(ctx, serverID, count)

	var r0 []*domain.ChatMessage
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) []*domain.ChatMessage); ok {
		r0 = rf(ctx, serverID, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ChatMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = rf(ctx, serverID, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, args, limit, offset
func (_m *ChatRepo) Search(ctx context.Context, args domain.FindArgs, limit int, offset int) (int, []*domain.ChatMessage, error) {
	ret := _m.Called(ctx, args, limit, offset)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, domain.FindArgs, int, int) int); ok {
		r0 = rf(ctx, args, limit, offset)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []*domain.ChatMessage
	if rf, ok := ret.Get(1).(func(context.Context, domain.FindArgs, int, int) []*domain.ChatMessage); ok {
		r1 = rf(ctx, args, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*domain.ChatMessage)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, domain.FindArgs, int, int) error); ok {
		r2 = rf(ctx, args, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Store provides a mock function with given fields: ctx, message
func (_m *ChatRepo) Store(ctx context.Context, message *domain.ChatMessage) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ChatMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, args
func (_m *ChatRepo) Update(ctx context.Context, id int64, args domain.UpdateArgs) (*domain.ChatMessage, error) {
	ret := _m.Called(ctx, id, args)

	var r0 *domain.ChatMessage
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.UpdateArgs) *domain.ChatMessage); ok {
		r0 = rf(ctx, id, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ChatMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, domain.UpdateArgs) error); ok {
		r1 = rf(ctx, id, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

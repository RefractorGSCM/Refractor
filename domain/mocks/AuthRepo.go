// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "Refractor/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepo is an autogenerated mock type for the AuthRepo type
type AuthRepo struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, userTraits
func (_m *AuthRepo) CreateUser(ctx context.Context, userTraits *domain.Traits) (*domain.AuthUser, error) {
	ret := _m.Called(ctx, userTraits)

	var r0 *domain.AuthUser
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Traits) *domain.AuthUser); ok {
		r0 = rf(ctx, userTraits)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AuthUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Traits) error); ok {
		r1 = rf(ctx, userTraits)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *AuthRepo) GetAllUsers(ctx context.Context) ([]*domain.AuthUser, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.AuthUser
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.AuthUser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.AuthUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecoveryLink provides a mock function with given fields: ctx, userID
func (_m *AuthRepo) GetRecoveryLink(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *AuthRepo) GetUserByID(ctx context.Context, id string) (*domain.AuthUser, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.AuthUser
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.AuthUser); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AuthUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

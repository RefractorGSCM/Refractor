// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "Refractor/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FlaggedWordService is an autogenerated mock type for the FlaggedWordService type
type FlaggedWordService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: c, id
func (_m *FlaggedWordService) Delete(c context.Context, id int64) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: c
func (_m *FlaggedWordService) GetAll(c context.Context) ([]*domain.FlaggedWord, error) {
	ret := _m.Called(c)

	var r0 []*domain.FlaggedWord
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.FlaggedWord); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.FlaggedWord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageContainsFlaggedWord provides a mock function with given fields: c, message
func (_m *FlaggedWordService) MessageContainsFlaggedWord(c context.Context, message string) (bool, error) {
	ret := _m.Called(c, message)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(c, message)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: c, word
func (_m *FlaggedWordService) Store(c context.Context, word *domain.FlaggedWord) error {
	ret := _m.Called(c, word)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FlaggedWord) error); ok {
		r0 = rf(c, word)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: c, id, newWord
func (_m *FlaggedWordService) Update(c context.Context, id int64, newWord string) (*domain.FlaggedWord, error) {
	ret := _m.Called(c, id, newWord)

	var r0 *domain.FlaggedWord
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *domain.FlaggedWord); ok {
		r0 = rf(c, id, newWord)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FlaggedWord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(c, id, newWord)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

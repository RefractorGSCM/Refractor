// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "Refractor/domain"

	mock "github.com/stretchr/testify/mock"
)

// RCONService is an autogenerated mock type for the RCONService type
type RCONService struct {
	mock.Mock
}

// CreateClient provides a mock function with given fields: server
func (_m *RCONService) CreateClient(server *domain.Server) error {
	ret := _m.Called(server)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Server) error); ok {
		r0 = rf(server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClient provides a mock function with given fields: serverID
func (_m *RCONService) DeleteClient(serverID int64) {
	_m.Called(serverID)
}

// GetClients provides a mock function with given fields:
func (_m *RCONService) GetClients() map[int64]domain.RCONClient {
	ret := _m.Called()

	var r0 map[int64]domain.RCONClient
	if rf, ok := ret.Get(0).(func() map[int64]domain.RCONClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]domain.RCONClient)
		}
	}

	return r0
}

// GetServerClient provides a mock function with given fields: serverID
func (_m *RCONService) GetServerClient(serverID int64) domain.RCONClient {
	ret := _m.Called(serverID)

	var r0 domain.RCONClient
	if rf, ok := ret.Get(0).(func(int64) domain.RCONClient); ok {
		r0 = rf(serverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.RCONClient)
		}
	}

	return r0
}

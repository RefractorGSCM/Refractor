// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "Refractor/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PlayerNameRepo is an autogenerated mock type for the PlayerNameRepo type
type PlayerNameRepo struct {
	mock.Mock
}

// GetNames provides a mock function with given fields: ctx, id, platform
func (_m *PlayerNameRepo) GetNames(ctx context.Context, id string, platform string) (string, []string, error) {
	ret := _m.Called(ctx, id, platform)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, platform)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(context.Context, string, string) []string); ok {
		r1 = rf(ctx, id, platform)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, id, platform)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Store provides a mock function with given fields: ctx, id, platform, name
func (_m *PlayerNameRepo) Store(ctx context.Context, id string, platform string, name string) error {
	ret := _m.Called(ctx, id, platform, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, id, platform, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateName provides a mock function with given fields: ctx, player, newName
func (_m *PlayerNameRepo) UpdateName(ctx context.Context, player *domain.Player, newName string) error {
	ret := _m.Called(ctx, player, newName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Player, string) error); ok {
		r0 = rf(ctx, player, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

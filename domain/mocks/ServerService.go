// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "Refractor/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ServerService is an autogenerated mock type for the ServerService type
type ServerService struct {
	mock.Mock
}

// CreateServerData provides a mock function with given fields: id
func (_m *ServerService) CreateServerData(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deactivate provides a mock function with given fields: c, id
func (_m *ServerService) Deactivate(c context.Context, id int64) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: c
func (_m *ServerService) GetAll(c context.Context) ([]*domain.Server, error) {
	ret := _m.Called(c)

	var r0 []*domain.Server
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Server); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Server)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAccessible provides a mock function with given fields: c
func (_m *ServerService) GetAllAccessible(c context.Context) ([]*domain.Server, error) {
	ret := _m.Called(c)

	var r0 []*domain.Server
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Server); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Server)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllServerData provides a mock function with given fields:
func (_m *ServerService) GetAllServerData() ([]*domain.ServerData, error) {
	ret := _m.Called()

	var r0 []*domain.ServerData
	if rf, ok := ret.Get(0).(func() []*domain.ServerData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServerData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, id
func (_m *ServerService) GetByID(c context.Context, id int64) (*domain.Server, error) {
	ret := _m.Called(c, id)

	var r0 *domain.Server
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Server); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Server)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerData provides a mock function with given fields: id
func (_m *ServerService) GetServerData(id int64) (*domain.ServerData, error) {
	ret := _m.Called(id)

	var r0 *domain.ServerData
	if rf, ok := ret.Get(0).(func(int64) *domain.ServerData); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServerData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: c, server
func (_m *ServerService) Store(c context.Context, server *domain.Server) error {
	ret := _m.Called(c, server)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Server) error); ok {
		r0 = rf(c, server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: c, id, args
func (_m *ServerService) Update(c context.Context, id int64, args domain.UpdateArgs) (*domain.Server, error) {
	ret := _m.Called(c, id, args)

	var r0 *domain.Server
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.UpdateArgs) *domain.Server); ok {
		r0 = rf(c, id, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Server)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, domain.UpdateArgs) error); ok {
		r1 = rf(c, id, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

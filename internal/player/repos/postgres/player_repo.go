/*
 * This file is part of Refractor.
 *
 * Refractor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package postgres

import (
	"Refractor/domain"
	"Refractor/pkg/querybuilders/psqlqb"
	"context"
	"database/sql"
	"github.com/pkg/errors"
	"go.uber.org/zap"
	"time"
)

const opTag = "PlayerRepo.Postgres."

type playerRepo struct {
	db     *sql.DB
	logger *zap.Logger
	qb     domain.QueryBuilder
}

func NewPlayerRepo(db *sql.DB, logger *zap.Logger) domain.PlayerRepo {
	return &playerRepo{
		db:     db,
		logger: logger,
		qb:     psqlqb.NewPostgresQueryBuilder(),
	}
}

func (r *playerRepo) fetch(ctx context.Context, query string, args ...interface{}) ([]*domain.Player, error) {
	const op = opTag + "Fetch"

	rows, err := r.db.QueryContext(ctx, query, args...)
	if err != nil {
		r.logger.Error("Could not execute SQL query", zap.String("query", query), zap.Error(err))
		return nil, errors.Wrap(err, op)
	}

	// Clean up on function exit
	defer func() {
		errRow := rows.Close()
		if errRow != nil {
			r.logger.Warn("Could not close SQL rows", zap.Error(err))
		}
	}()

	results := make([]*domain.Player, 0)
	for rows.Next() {
		player := &domain.DBPlayer{}

		if err := r.scanRows(rows, player); err != nil {
			if err == sql.ErrNoRows {
				return nil, errors.Wrap(domain.ErrNotFound, op)
			}

			return nil, errors.Wrap(err, op)
		}

		results = append(results, player.Player())
	}

	return results, nil
}

// Store stores a new player in the postgres database. The following fields must be present on the passed
// in player: PlayerID, Platform, CurrentName
//
// It first inserts the player into the Players table and then runs a second insert into
// PlayerNames to record the player's name.
//
// Because we don't use any autogenerated or serial IDs on players, the player struct is not
// updated in any way and remains exactly as it was passed in.
func (r *playerRepo) Store(ctx context.Context, player *domain.Player) error {
	const op = opTag + "Store"

	query := "INSERT INTO Players (PlayerID, Platform) VALUES ($1, $2);"

	stmt, err := r.db.PrepareContext(ctx, query)
	if err != nil {
		r.logger.Error("Could not prepare statement", zap.String("query", query), zap.Error(err))
		return errors.Wrap(err, op)
	}

	_, err = stmt.ExecContext(ctx, player.PlayerID, player.Platform)
	if err != nil {
		r.logger.Error("Could not execute query", zap.String("query", query), zap.Error(err))
		return errors.Wrap(err, op)
	}

	// Insert into PlayerNames
	query = "INSERT INTO PlayerNames (PlayerID, Platform, Name) VALUES ($1, $2, $3);"

	stmt, err = r.db.PrepareContext(ctx, query)
	if err != nil {
		r.logger.Error("Could not prepare PlayerNames insert statement", zap.String("query", query), zap.Error(err))
		return errors.Wrap(err, op)
	}

	if _, err := stmt.ExecContext(ctx, player.PlayerID, player.Platform, player.CurrentName); err != nil {
		r.logger.Error("Could not execute PlayerNames insert query", zap.String("query", query), zap.Error(err))
		return errors.Wrap(err, op)
	}

	return nil
}

func (r *playerRepo) GetByID(ctx context.Context, platform, id string) (*domain.Player, error) {
	const op = opTag + "GetByID"

	query := `SELECT * FROM Players WHERE PlayerID = $1 AND Platform = $2;`

	results, err := r.fetch(ctx, query, id, platform)
	if err != nil {
		return nil, errors.Wrap(err, op)
	}

	if len(results) > 0 {
		return results[0], nil
	}

	return nil, errors.Wrap(domain.ErrNotFound, op)
}

func (r *playerRepo) Exists(ctx context.Context, args domain.FindArgs) (bool, error) {
	const op = opTag + "Exists"

	query, values := r.qb.BuildExistsQuery("Players", args)

	row := r.db.QueryRowContext(ctx, query, values...)

	var exists bool
	if err := row.Scan(&exists); err != nil {
		r.logger.Error("Could not scan row", zap.Error(err))
		return false, errors.Wrap(err, op)
	}

	return exists, nil
}

// UpdateName updates the player's name in the database. It does this by adding a new row in PlayerNames
// if the player never used this name before. If they have used this name before, it updates the DateRecorded
// field to the current timestamp.
//
// The following fields are required on the passed in player: PlayerID, Platform
//
// The passed in player struct has it's CurrentName field updated on success.
func (r *playerRepo) UpdateName(ctx context.Context, player *domain.Player, newName string) error {
	const op = opTag + "UpdateName"

	query := `INSERT INTO PlayerNames (PlayerID, Platform, Name, DateRecorded) VALUES ($1, $2, $3, $4)
			ON CONFLICT (PlayerID, Platform) DO UPDATE SET DateRecorded = CURRENT_TIMESTAMP;`

	runeName := []rune(newName)

	if _, err := r.db.ExecContext(ctx, query, player.PlayerID, player.Platform, string(runeName), time.Now()); err != nil {
		r.logger.Error("Could not execute name update query", zap.Error(err))
		return errors.Wrap(err, op)
	}

	player.CurrentName = newName

	return nil
}

func (r *playerRepo) Update(ctx context.Context, platform, id string, args domain.UpdateArgs) (*domain.Player, error) {
	const op = opTag + "Update"

	query, values := r.qb.BuildUpdateQuery("Players", id, "(PlayerID, Platform)", args)

	stmt, err := r.db.PrepareContext(ctx, query)
	if err != nil {
		r.logger.Error("Could not prepare statement", zap.String("query", query), zap.Error(err))
		return nil, errors.Wrap(err, op)
	}

	row := stmt.QueryRowContext(ctx, values...)

	updatedPlayer := &domain.DBPlayer{}
	if err := r.scanRow(row, updatedPlayer); err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.Wrap(domain.ErrNotFound, op)
		}

		r.logger.Error("Could not scan updated player", zap.Error(err))
		return nil, errors.Wrap(err, op)
	}

	return updatedPlayer.Player(), nil
}

func (r *playerRepo) GetPlayerNames(ctx context.Context, id, platform string) (string, []string, error) {
	const op = opTag + "GetPlayerNames"

	query := "SELECT Name FROM PlayerNames WHERE PlayerID = $1 AND Platform = $2 ORDER BY DateRecorded DESC;"

	rows, err := r.db.QueryContext(ctx, query, id, platform)
	if err != nil {
		return "", nil, err
	}

	var names []string

	for rows.Next() {
		name := ""

		err = rows.Scan(&name)
		if err != nil {
			r.logger.Error("Could not scan player name", zap.Error(err))
			return "", nil, errors.Wrap(err, op)
		}

		names = append(names, name)
	}

	if names == nil {
		return "", nil, errors.Wrap(domain.ErrNotFound, op)
	}

	// PlayerNames are ordered in descending order by DateRecorded so index 0 will be the most recent name
	return names[0], names[1:], nil
}

// Scan helpers
func (r *playerRepo) scanRow(row *sql.Row, player *domain.DBPlayer) error {
	return row.Scan(&player.PlayerID, &player.Platform, &player.Watched, &player.LastSeen, &player.CreatedAt, &player.ModifiedAt)
}

func (r *playerRepo) scanRows(rows *sql.Rows, player *domain.DBPlayer) error {
	return rows.Scan(&player.PlayerID, &player.Platform, &player.Watched, &player.LastSeen, &player.CreatedAt, &player.ModifiedAt)
}

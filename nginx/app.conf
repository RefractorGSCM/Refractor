server {
    listen 80;
    server_name {{DOMAIN}};

    location / {
        return 301 https://$host$request_uri;
    }

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
}

server {
    listen 443 ssl;
    server_name {{DOMAIN}};

    ssl_certificate /etc/letsencrypt/live/{{DOMAIN}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{DOMAIN}}/privkey.pem;

    # Route API calls to the backend API.
    location /api/ {
        proxy_pass http://refractor:4000;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
    }

    # Routes to the public Ory Kratos API. The ^~ is a special nginx matcher which is used to perform the longest
    # non regex match against the /kp/ URI. If a request reaches this block, no further matching takes place.
    # Additionally, due to the ending / after /kp/ and :4433/ in the proxy pass directive, the /kp/ portion of the
    # request URI will be stripped away once routed to the public kratos API.
    #
    # For example, a request to /kp/self-service/login/browser will be routed to Ory Kratos' Public API
    # as the following: /self-service/login/browser
    location ^~ /kp/ {
        proxy_pass http://refractor_kratos:4433/;
        proxy_set_header Host $host;
        proxy_pass_request_headers on;
    }

    # Routes to the backend server-side auth pages. Anything which starts with /k and does not match /kp/ (seen above)
    # will be handled in this block.
    location /k {
        proxy_pass http://refractor:4455;
        proxy_set_header Host $host;
        proxy_pass_request_headers on;
    }

    # Routes to the frontend. Anything which doesn't match any of the above matchers will be handled in this block.
    location / {
        proxy_pass http://refractor_frontend:3000;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
